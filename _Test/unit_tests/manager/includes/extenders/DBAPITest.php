<?php

require_once dirname(__FILE__) . '/../../../../../manager/includes/extenders/dbapi.php';

/**
 * Test class for DBAPI.
 * Generated by PHPUnit
 *
 * @author  Stefanie Janine Stoelting (mail@stefanie-stoelting.de)
 * @name    DBAPITest
 * @package MODX
 * @subpackage unitTests
 * @license LGPL
 * @todo After supporting more databases, more test for these databases have to
 *       be implented.
 */
class DBAPITest extends PHPUnit_Framework_TestCase {

    /**
     * @var DBAPI
     */
    protected $object;
    
    /**
     * Configuration array, set in setUp method
     * @var array
     */
    protected $config;
    
    /**
     * Configuration array, contains the loaded test ini file
     * @var array
     */
    protected $testConfig;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $iniFile = __DIR__ . '/../test.config.ini.inc.php';
        
        $this->testConfig = parse_ini_file($iniFile, true);
        
        $this->config = array(
              'basePath'    => __DIR__ . '/../../../../../'
            , 'db_type'     => $this->testConfig['MODX_base_configuration']['database_type']
        );

        $this->object = DBAPI::getInstance($this->config);
    } // setUp

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        //$this->object = null;        
    } // tearDown

    /**
     * @covers DBAPI::getInstance
     */
    public function testGetInstance() {
        $this->assertTrue(is_a($this->object, 'DBAPI'));
    } // testGetInstance

    /**
     * @covers DBAPI::getCurrentDatabaseEngine
     */
    public function testGetCurrentDatabaseEngine() {
        $this->assertEquals(DBAPI::DB_MYSQL_MYISAM, $this->object->getCurrentDatabaseEngine());
    } // testGetCurrentDatabaseEngine

    /**
     * @covers DBAPI::getConnected
     */
    public function testGetConnected() {
        $this->assertFalse($this->object->get_connected());
    }

    /**
     * @covers DBAPI::connect
     */
    public function testConnect() {
        $this->object->connect(
              $this->testConfig['MODX_base_configuration']['database_server']
            , $this->testConfig['MODX_base_configuration']['dbase']
            , $this->testConfig['MODX_base_configuration']['database_user']
            , $this->testConfig['MODX_base_configuration']['database_password']
            , 0
            , $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );
        $this->assertTrue($this->object->get_connected());
    } // testConnect

    /**
     * @covers DBAPI::disconnect
     */
    public function testDisconnect() {
        $this->testConnect();
        $this->assertTrue($this->object->disconnect());
    } // testDisconnect

    /**
     * @covers DBAPI::escape
     */
    public function testEscape() {
        $result = $this->object->escape("This is'nt escaped.");

        $this->assertEquals("This is\\'nt escaped.", $result);
    } // testEscape

    /**
     * @covers DBAPI::query
     * @todo Implement testQuery().
     */
    public function testQuery() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DBAPI::getConfiguration
     * @todo Implement testGetConfiguration().
     */
    public function testGetConfiguration() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DBAPI::delete
     * @todo Implement testDelete().
     */
    public function testDelete() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DBAPI::getInsertId
     * @todo Implement testGetInsertId().
     */
    public function testGetInsertId() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DBAPI::getLastError
     * @todo Implement testGetRecordCount().
     */
    public function testGetLastError() {
        $this->testConnect();
        
        //echo 'last error ' . $this->object->getLastError($this->object->conn);
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DBAPI::getVersion
     */
    public function testGetVersion() {
        $this->testConnect();
        
        $this->assertNotEmpty($this->object->getVersion());
    }

    /**
     * @covers DBAPI::getRecordCount
     * @todo Implement testGetRecordCount().
     */
    public function testGetRecordCount() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DBAPI::getRow
     * @todo Implement testGetRow().
     */
    public function testGetRow() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DBAPI::getAffectedRows
     * @todo Implement testGetAffectedRows().
     */
    public function testGetAffectedRows() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

} // DBAPITest