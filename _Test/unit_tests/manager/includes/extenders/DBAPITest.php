<?php

require_once dirname(__FILE__) . '/../../../../../manager/includes/extenders/dbapi.php';

/**
 * Test class for DBAPI.
 * Generated by PHPUnit
 *
 * @author  Stefanie Janine Stoelting (mail@stefanie-stoelting.de)
 * @name    DBAPITest
 * @package MODX
 * @subpackage unitTests
 * @license LGPL
 * @todo After supporting more databases, more test for these databases have to
 *       be implented.
 */
class DBAPITest extends PHPUnit_Framework_TestCase {

    /**
     * @var DBAPI
     */
    protected $object;
    
    /**
     * Configuration array, set in setUp method
     * @var array
     */
    protected $config;
    
    /**
     * Configuration array, contains the loaded test ini file
     * @var array
     */
    protected $testConfig;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $iniFile = __DIR__ . '/../test.config.ini.inc.php';
        
        $this->testConfig = parse_ini_file($iniFile, true);
        
        $this->config = array(
              'basePath'    => __DIR__ . '/../../../../../'
            , 'db_type'     => $this->testConfig['MODX_base_configuration']['database_type']
        );

        $this->object = DBAPI::getInstance($this->config);
    } // setUp

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->object = null;        
    } // tearDown
    
    /**
     * Creates a mock object of the DocumentObject as global $modx
     * 
     * @global object $modx 
     */
    protected function createMock() {
        $methods = array(
            'getMicroTime'
            , 'queryTime'
            , 'getDumpSQL'
            , 'setExecutedQueries'
        );
        $GLOBALS['modx'] = $this->getMock(
                'DocumentParser'
                , $methods
                , array()
                , ''
                , false
            );
        
        global $modx;
        $modx->expects($this->any())
             ->method('getMicroTime')
             ->will($this->returnValue('1'));
        $modx->expects($this->any())
             ->method('queryTime')
             ->will($this->returnValue('1'));
        $modx->expects($this->any())
             ->method('getDumpSQL')
             ->will($this->returnValue(false));
        $modx->expects($this->any())
             ->method('setExecutedQueries');        
    }

    /**
     * @covers DBAPI::getInstance
     */
    public function testGetInstance() {
        $this->assertTrue(is_a($this->object, 'DBAPI'));
    } // testGetInstance

    /**
     * @covers DBAPI::getCurrentDatabaseEngine
     */
    public function testGetCurrentDatabaseEngine() {
        $this->assertEquals(DBAPI::DB_MYSQL_MYISAM, $this->object->getCurrentDatabaseEngine());
    } // testGetCurrentDatabaseEngine

    /**
     * @covers DBAPI::getConnected
     */
    public function testGetConnected() {
        $this->assertFalse($this->object->getConnected());
    }

    /**
     * @covers DBAPI::connect
     */
    public function testConnect() {
        $this->object->connect(
            $this->testConfig['MODX_base_configuration']['database_server'],
            $this->testConfig['MODX_base_configuration']['dbase'],
            $this->testConfig['MODX_base_configuration']['database_user'],
            $this->testConfig['MODX_base_configuration']['database_password'],
            0,
            $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );
        $this->assertTrue($this->object->getConnected());
    } // testConnect

    /**
     * @covers DBAPI::disconnect
     */
    public function testDisconnect() {
        $this->object->connect(
            $this->testConfig['MODX_base_configuration']['database_server'],
            $this->testConfig['MODX_base_configuration']['dbase'],
            $this->testConfig['MODX_base_configuration']['database_user'],
            $this->testConfig['MODX_base_configuration']['database_password'],
            0,
            $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );
        //$this->assertTrue($this->object->getConnected());
        //$this->assertTrue($this->object->disconnect());
    } // testDisconnect

    /**
     * @covers DBAPI::escape
     */
    public function testEscape() {
        $result = $this->object->escape("This is'nt escaped.");

        $this->assertEquals("This is\\'nt escaped.", $result);
    } // testEscape

    /**
     * @covers DBAPI::query
     */
    public function testQuery() {
        $this->createMock();

        $this->object->connect(
            $this->testConfig['MODX_base_configuration']['database_server'],
            $this->testConfig['MODX_base_configuration']['dbase'],
            $this->testConfig['MODX_base_configuration']['database_user'],
            $this->testConfig['MODX_base_configuration']['database_password'],
            0,
            $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );
        $this->assertTrue($this->object->getConnected());
        
        $sql = 'SELECT * FROM ' . $this->testConfig['MODX_base_configuration']['table_prefix'] . 'categories';
        
        $result = $this->object->query($sql);
        
        $this->assertTrue(is_a($result, 'ezSQL_recordset'));
    }

    /**
     * @covers DBAPI::getConfiguration
     */
    public function testGetConfiguration() {
        $this->object->connect(
            $this->testConfig['MODX_base_configuration']['database_server'],
            $this->testConfig['MODX_base_configuration']['dbase'],
            $this->testConfig['MODX_base_configuration']['database_user'],
            $this->testConfig['MODX_base_configuration']['database_password'],
            0,
            $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );
        $this->assertTrue($this->object->getConnected());

        $result = $this->object->getConfiguration();
        
        $this->assertTrue(is_array($result));
        
        $this->assertArrayHasKey('host', $result);
    } // testGetConfiguration

    /**
     * @covers DBAPI::getInsertId
     * @todo check getInsertId, it does not work as expected
     */
    public function testGetInsertId() {
        $this->createMock();
        
        $this->object->connect(
            $this->testConfig['MODX_base_configuration']['database_server'],
            $this->testConfig['MODX_base_configuration']['dbase'],
            $this->testConfig['MODX_base_configuration']['database_user'],
            $this->testConfig['MODX_base_configuration']['database_password'],
            0,
            $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );

        $this->assertTrue($this->object->getConnected());
        
        if ($this->object->getCurrentDatabaseEngine() == (DBAPI::DB_MYSQL_MYISAM || 
                $this->object->getCurrentDatabaseEngine() == DBAPI::DB_MYSQL_INNODB)) {
            $sql = 'INSERT INTO ' . $this->testConfig['MODX_base_configuration']['table_prefix'] 
                    . 'event_log(eventid, type, source, description)'
                    . ' VALUES(0, 1, \'UnitTest\', \'Unit test call\')';

            $this->object->query($sql);

            $this->assertTrue(is_numeric($this->object->getInsertId()));
        }
    }

    /**
     * @covers DBAPI::getLastError
     */
    public function testGetLastError() {
        $this->createMock();
        
        $this->object->connect(
            $this->testConfig['MODX_base_configuration']['database_server'],
            $this->testConfig['MODX_base_configuration']['dbase'],
            $this->testConfig['MODX_base_configuration']['database_user'],
            $this->testConfig['MODX_base_configuration']['database_password'],
            0,
            $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );

        $this->assertTrue($this->object->getConnected());
        
        try {
            $this->object->query('SELECT * FROM does_not_exist');
        } catch (Exception $exc) {
            // Do nothing
        }

        $this->assertEquals('Table \'evolution.does_not_exist\' doesn\'t exist', $this->object->getLastError());
        
    }

    /**
     * @covers DBAPI::getVersion
     */
    public function testGetVersion() {
        $this->object->connect(
            $this->testConfig['MODX_base_configuration']['database_server'],
            $this->testConfig['MODX_base_configuration']['dbase'],
            $this->testConfig['MODX_base_configuration']['database_user'],
            $this->testConfig['MODX_base_configuration']['database_password'],
            0,
            $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );

        $this->assertNotEmpty($this->object->getVersion());
    } // testGetVersion

    /**
     * @covers DBAPI::getRecordCount
     */
    public function testGetRecordCount() {
        $this->createMock();
        
        $this->object->connect(
            $this->testConfig['MODX_base_configuration']['database_server'],
            $this->testConfig['MODX_base_configuration']['dbase'],
            $this->testConfig['MODX_base_configuration']['database_user'],
            $this->testConfig['MODX_base_configuration']['database_password'],
            0,
            $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );

        $this->assertTrue($this->object->getConnected());
        
        $sql = 'SELECT COUNT(*) AS testCount FROM ' . $this->testConfig['MODX_base_configuration']['table_prefix'] . 'categories';
        
        $result = $this->object->query($sql);
        
        $this->assertEquals(1, $this->object->getRecordCount($result));
    }

    /**
     * @covers DBAPI::getRow
     */
    public function testGetRow() {
        $this->createMock();
        
        $this->object->connect(
            $this->testConfig['MODX_base_configuration']['database_server'],
            $this->testConfig['MODX_base_configuration']['dbase'],
            $this->testConfig['MODX_base_configuration']['database_user'],
            $this->testConfig['MODX_base_configuration']['database_password'],
            0,
            $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );

        $this->assertTrue($this->object->getConnected());
        
        $sql = 'SELECT COUNT(*) AS testCount, \'Test\' AS testText FROM ' . $this->testConfig['MODX_base_configuration']['table_prefix'] . 'categories';
        
        $result = $this->object->query($sql);
        
        $row = $this->object->getRow($result, DBAPI::ROW_MODE_OBJECT);
        
        $this->assertEquals('Test', $row->testText);
        
        $this->assertTrue(is_numeric($row->testCount));
    } // testGetRow

    /**
     * @covers DBAPI::getAffectedRows
     */
    public function testGetAffectedRows() {
        $this->createMock();
        
        $this->object->connect(
            $this->testConfig['MODX_base_configuration']['database_server'],
            $this->testConfig['MODX_base_configuration']['dbase'],
            $this->testConfig['MODX_base_configuration']['database_user'],
            $this->testConfig['MODX_base_configuration']['database_password'],
            0,
            $this->testConfig['MODX_base_configuration']['database_connection_charset']
        );

        $this->assertTrue($this->object->getConnected());
        
        if ($this->object->getCurrentDatabaseEngine() == (DBAPI::DB_MYSQL_MYISAM || 
                $this->object->getCurrentDatabaseEngine() == DBAPI::DB_MYSQL_INNODB)) {
            $sql = 'SELECT COUNT(*) AS testCount FROM ' . $this->testConfig['MODX_base_configuration']['table_prefix'] . 'categories';

            $this->object->query($sql);

            $this->assertEquals(0, $this->object->getAffectedRows($this->object->conn));
        }
    } // testGetAffectedRows

} // DBAPITest